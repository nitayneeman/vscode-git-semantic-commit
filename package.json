{
  "name": "git-semantic-commit",
  "version": "2.0.0",
  "license": "MIT",
  "author": "Nitay Neeman",
  "description": "ðŸ’¬ A Visual Studio Code extension which enables to commit simply by the semantic message conventions",
  "homepage": "https://github.com/nitayneeman/vscode-git-semantic-commit",
  "keywords": [
    "Git",
    "Semantic",
    "Commit",
    "Message"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/nitayneeman/vscode-git-semantic-commit.git"
  },
  "bugs": "https://github.com/nitayneeman/vscode-git-semantic-commit/issues",
  "displayName": "Git - Semantic Commit",
  "publisher": "nitayneeman",
  "icon": "images/logo.png",
  "galleryBanner": {
    "color": "#eae9e1",
    "theme": "light"
  },
  "engines": {
    "vscode": "^1.39.0"
  },
  "categories": [
    "Other"
  ],
  "badges": [
    {
      "description": "Build",
      "url": "https://travis-ci.com/nitayneeman/vscode-git-semantic-commit.svg?token=vHfpxFNvotCsScqrpvMs&branch=master",
      "href": "https://travis-ci.com/nitayneeman/vscode-git-semantic-commit"
    }
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Git - Semantic Commit",
      "properties": {
        "gitSemanticCommit.commitOptions": {
          "type": "string",
          "default": "--quiet",
          "markdownDescription": "Specifies which [arguments](https://git-scm.com/docs/git-commit#_options) to be passed when the commit is executed."
        },
        "gitSemanticCommit.preserveScope": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Determines whether to preserve the last message scope that was inserted."
        },
        "gitSemanticCommit.scopeTemplate": {
          "type": "string",
          "default": "($scope)",
          "markdownDescription": "Specifies scope template (`$scope` placeholder will be replaced with the passed scope). Check out [this](https://github.com/nitayneeman/vscode-git-semantic-commit#customize-your-scope) example."
        },
        "gitSemanticCommit.stageAll": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Determines whether to stage all changes before the commit, in case the staging area (index) is empty."
        },
        "gitSemanticCommit.types": {
          "type": "array",
          "default": [
            {
              "type": "build",
              "description": "Development changes related to the build system"
            },
            {
              "type": "ci",
              "description": "Development changes related to the continuous integration and deployment system"
            },
            {
              "type": "docs",
              "description": "Documentation changes related to the project"
            },
            {
              "type": "feat",
              "description": "Production changes related to new backward-compatible abilities or functionality"
            },
            {
              "type": "fix",
              "description": "Production changes related to backward-compatible bug fixes"
            },
            {
              "type": "perf",
              "description": "Production changes related to backward-compatible performance improvements"
            },
            {
              "type": "refactor",
              "description": "Development changes related to modifying the codebase"
            },
            {
              "type": "style",
              "description": "Development changes related to styling the codebase"
            },
            {
              "type": "test",
              "description": "Development changes related to tests"
            }
          ],
          "items": {
            "type": [
              "string",
              "object"
            ],
            "description": "Can be either a string, or an object. If an object, use type for the commit type, and description to give a short description for the particular commit type."
          },
          "minItems": 1,
          "uniqueItems": true,
          "markdownDescription": "Specifies the supported message types. Check out [this](https://github.com/nitayneeman/vscode-git-semantic-commit#customize-your-types) example."
        }
      }
    },
    "commands": [
      {
        "command": "gitSemanticCommit.semanticCommit",
        "title": "Semantic Commit",
        "category": "Git",
        "icon": {
          "dark": "images/navigation/dark-icon.svg",
          "light": "images/navigation/light-icon.svg"
        }
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "gitSemanticCommit.semanticCommit",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        }
      ],
      "scm/title": [
        {
          "command": "gitSemanticCommit.semanticCommit",
          "when": "scmProvider == git",
          "group": "navigation"
        },
        {
          "command": "gitSemanticCommit.semanticCommit",
          "when": "scmProvider == git",
          "group": "4_commit"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && ./scripts/pretest.sh",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^5.2.7",
    "@types/node": "^12.11.1",
    "@types/vscode": "^1.39.0",
    "fs-extra": "^8.1.0",
    "glob": "^7.1.4",
    "mocha": "^6.2.2",
    "tslint": "^5.20.0",
    "typescript": "^3.6.4",
    "vscode-test": "^1.2.0"
  }
}
